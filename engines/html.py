# -*- coding: utf-8 -*-
from engines.utils import use_item
import json


def write_tests(output_filename, siteTests, sites):
    # test = json.dumps(siteTests, indent=4)
    # print('A', test)

    root_filepath = output_filename.removesuffix('.htm')

    prefix = '-'
    if root_filepath.endswith('/') or root_filepath.endswith('\\'):
        prefix = ''

    overview_filepath = root_filepath + prefix + 'overview.htm'
    sites_filepath = root_filepath + prefix + 'sites.htm'
    tests_filepath = root_filepath + prefix + 'tests.htm'
    categories_filepath = root_filepath + prefix + 'categories.htm'
    features_filepath = root_filepath + prefix + 'features.htm'

    create_overview(
        overview_filepath, sites_filepath, tests_filepath, categories_filepath, features_filepath)

    create_sites(
        sites, siteTests, sites_filepath, overview_filepath)

    create_tests(siteTests, sites, tests_filepath, overview_filepath)

    create_categories(siteTests, categories_filepath, overview_filepath)

    create_features(siteTests, features_filepath, overview_filepath)


def create_overview(overview_filepath, sites_filepath, tests_filepath, categories_filepath, features_filepath):
    index_content = """<!DOCTYPE html><html lang="en" class="no-js"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>
    <h1>Overview</h1>
    <p>
        The results that are showed here has been generated by the open source tool webperf-core.
    </p>

    <h2>Sites</h2>
    <p>
        This section will show results from a website/url focused way.<br />
        <a href="../{0}">Read more about sites</a>
    </p>
    <h2>Tests</h2>
    <p>
        This section will show results from a test focused way.<br />
        <a href="../{1}">Read more about tests</a>
    </p>
    <h2>Categories</h2>
    <p>
        This section will show results from a category focused way.<br />
        <a href="../{2}">Read more about categories</a>
    </p>
    <h2>Features</h2>
    <p>
        This section will show results from a feature focused way.<br />
        <a href="../{3}">Read more about features</a>
    </p>
    </body></html>""".format(sites_filepath, tests_filepath, categories_filepath, features_filepath)

    with open(overview_filepath, 'w') as outfile:
        outfile.write(index_content)


def get_site_item(site):
    return """<li><a href="site-{0}.htm">{1}</a></li>\r\n""".format(site[0], site[1])


def create_sites(sites, test_results, sites_filepath, overview_filepath):
    test = json.dumps(sites, indent=4)
    # print('A', test)

    items = list(map(get_site_item, sites))

    index_content = """<!DOCTYPE html><html lang="en" class="no-js"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>
    <h1>Sites</h1>
    <p>
        This section will show results from a website/url focused way.<br />
    </p>

    <ol start="1">
        {0}
    </ol>

    <h2>RAW:</h2>
    <p>
        This section will show the raw JSON data from webperf-core
    </p>
    <code><pre>{1}</pre></code>
    </body></html>""".format(''.join(items), test)

    with open(sites_filepath, 'w') as outfile:
        outfile.write(index_content)


def get_test_item(test):
    return """<li value="{0}"><a href="test-{0}.htm">{1}</a></li>\r\n""".format(test['id'], test['name'])


def create_tests(test_results, input_sites, tests_filepath, overview_filepath):

    tests = {}
    sites = {}
    for result in test_results:
        test_type = result['type_of_test']
        if test_type not in tests:
            test_name = 'UNKNOWN'
            if test_type == 1:
                test_name = 'Performance (Google Lighthouse)'
            elif test_type == 2:
                test_name = '404 (Page not Found)'
            elif test_type == 4:
                test_name = 'SEO (Google Lighthouse)'
            elif test_type == 5:
                test_name = 'Best Practice(Google Lighthouse)'
            elif test_type == 6:
                test_name = 'HTML Validation'
            elif test_type == 7:
                test_name = 'CSS Validation'
            elif test_type == 8:
                test_name = 'PWA (Google Lighthouse)'
            elif test_type == 9:
                test_name = 'Standard files'
            elif test_type == 10:
                test_name = 'Accessibility (Google Lighthouse)'
            elif test_type == 15:
                test_name = 'Performance (Sitespeed.io)'
            elif test_type == 17:
                test_name = 'Quality on frontend(Yellow Lab Tools)'
            elif test_type == 18:
                test_name = 'Accessibility (Pa11y)'
            elif test_type == 20:
                test_name = 'Integrity & Security(Webbkoll)'
            elif test_type == 21:
                test_name = 'HTTP & Network'
            elif test_type == 22:
                test_name = 'Energy Efficiency (Website Carbon Calculator)'
            elif test_type == 23:
                test_name = 'Tracking and Privacy (Beta)'
            elif test_type == 24:
                test_name = 'Email (Beta)'
            elif test_type == 25:
                test_name = 'Software (Alpha)'
            elif test_type == 26:
                test_name = 'Accessibility Statement (Alfa)'

            tests[test_type] = {
                'id': test_type,
                'name': test_name,
                'description': 'This test test X',
                'results': []
            }
        tests[test_type]['results'].append(result)

        site_id = result['site_id']
        if site_id not in sites:
            site_url = 'https://example.org/'

            for input_site in input_sites:
                if input_site[0] == site_id:
                    site_url = input_site[1]

            sites[site_id] = {
                'id': site_id,
                'url': site_url,
                'results': []
            }
        sites[site_id]['results'].append(result)

    items = list(map(get_test_item, tests.values()))
    nice_tests = json.dumps(tests, indent=4)

    index_content = """<!DOCTYPE html><html lang="en" class="no-js"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>
    <h1>Tests</h1>
    <p>
        This section will show results from a test focused way.<br />
    </p>

    <ol>{0}</ol>
    <h2>RAW:</h2>
    <p>
        This section will show the raw JSON data from webperf-core
    </p>
    <code><pre>{1}</pre></code>
    </body></html>""".format(''.join(items), nice_tests)

    with open(tests_filepath, 'w') as outfile:
        outfile.write(index_content)

    for test in tests.values():
        create_test(test, tests_filepath)

    for site in sites.values():
        create_site(site, tests_filepath)


def create_site(site, tests_filepath):
    nice_site = json.dumps(site, indent=4)

    review_overall = []
    review_a11y = []
    review_sec = []
    review_perf = []
    review_stand = []

    for result in site['results']:
        review_overall.append(result['report'].replace(
            '<', '&gt;').replace('>', '&lt;').replace('\r\n', '<br />'))
        review_a11y.append(result['report_a11y'].replace(
            '<', '&gt;').replace('>', '&lt;').replace('\r\n', '<br />'))
        review_sec.append(result['report_sec'].replace(
            '<', '&gt;').replace('>', '&lt;').replace('\r\n', '<br />'))
        review_perf.append(result['report_perf'].replace(
            '<', '&gt;').replace('>', '&lt;').replace('\r\n', '<br />'))
        review_stand.append(result['report_stand'].replace(
            '<', '&gt;').replace('>', '&lt;').replace('\r\n', '<br />'))

    index_content = """<!DOCTYPE html><html lang="en" class="no-js"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>
    <h1>Site Overview</h1>
    <p>
        Website url: <a href="{2}">{2}</a>
    </p>
    <h2>Overview</h2>
    <p>{3}</p>

    <h2>Security and Integrity</h2>
    <p>{4}</p>

    <h2>Performance</h2>
    <p>{5}</p>

    <h2>Accessability</h2>
    <p>{6}</p>

    <h2>Standards</h2>
    <p>{7}</p>

    <h2>RAW:</h2>
    <p>
        This section will show the raw JSON data from webperf-core
    </p>
    <code><pre>{1}</pre></code>
    </body></html>""".format(site['id'], nice_site, site['url'],
                             ''.join(review_overall),
                             ''.join(review_sec),
                             ''.join(review_perf),
                             ''.join(review_a11y),
                             ''.join(review_stand))

    test_filepath = tests_filepath.replace(
        'tests.htm', 'site-{0}.htm'.format(site['id']))
    with open(test_filepath, 'w') as outfile:
        outfile.write(index_content)


def create_test(test, tests_filepath):
    nice_test = json.dumps(test, indent=4)
    index_content = """<!DOCTYPE html><html lang="en" class="no-js"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>
    <h1>Test: {0}</h1>
    <p>
        {2}
    </p>

    <h2>Test Weight/Percental</h2>
    <p>
        Skriv ut hur testets betyg fördelas, förslagsvis enligt nedan utifrån testets precentil:
        0-10,           1,0
        10-20,          1,5
        20-30,          2,0
        30-40,          2,5
        40-50,          3,0
        50-60,          3,0
        60-70,          3,5
        70-80,          4,0
        80-90,          4,5
        90-100          5,0
    </p>

    <h2>Sites</h2>
    <p>
        Webbplatser och dess placering med högst betyg först.
    </p>
    <ol>
        <li>{0}</li>
    </ol>

    <h2>RAW:</h2>
    <p>
        This section will show the raw JSON data from webperf-core
    </p>
    <code><pre>{1}</pre></code>
    </body></html>""".format(test['name'], nice_test, test['description'])

    test_filepath = tests_filepath.replace(
        'tests.htm', 'test-{0}.htm'.format(test['id']))
    with open(test_filepath, 'w') as outfile:
        outfile.write(index_content)


def create_categories(test_results, categories_filepath, overview_filepath):
    test = json.dumps(test_results, indent=4)
    # print('A', test)

    index_content = """<!DOCTYPE html><html lang="en" class="no-js"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>
    <h1>Categories</h1>
    <p>
        This section will show results from a category focused way.<br />
    </p>

    <ol>
        <li>{0}</li>
    </ol>

    <h2>RAW:</h2>
    <p>
        This section will show the raw JSON data from webperf-core
    </p>
    <code><pre>{1}</pre></code>
    </body></html>""".format(test_results, test)

    with open(categories_filepath, 'w') as outfile:
        outfile.write(index_content)


def create_features(test_results, features_filepath, overview_filepath):
    test = json.dumps(test_results, indent=4)
    # print('A', test)

    index_content = """<!DOCTYPE html><html lang="en" class="no-js"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>
    <h1>Features</h1>
    <p>
        This section will show results from a feature focused way.<br />
    </p>

    <ol>
        <li>{0}</li>
    </ol>

    <h2>RAW:</h2>
    <p>
        This section will show the raw JSON data from webperf-core
    </p>
    <code><pre>{1}</pre></code>
    </body></html>""".format(test_results, test)

    with open(features_filepath, 'w') as outfile:
        outfile.write(index_content)
